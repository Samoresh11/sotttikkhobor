from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.lang import Builder
from kivy.properties import StringProperty, BooleanProperty
from kivy.clock import Clock
from kivy.utils import platform
from kivy.core.audio import SoundLoader
import os
import threading
from pytube import YouTube

Builder.load_file('ytubematx.kv')

class VideoPlayerPopup(Popup):
    def __init__(self, video_url, **kwargs):
        super().__init__(**kwargs)
        self.video_url = video_url
        self.title = 'YouTube Video Player'
        self.size_hint = (0.9, 0.8)
        self.auto_dismiss = True
        
        # Add content to popup
        content = BoxLayout(orientation='vertical')
        content.add_widget(Label(
            text=f'Video URL: {video_url}\n\nVideo player not available in this version.\nUse external browser to view the video.',
            text_size=(self.width, None),
            size_hint_y=None,
            height=200
        ))
        self.content = content

class MainWidget(BoxLayout):
    status = StringProperty('Ready')
    download_path = 'downloads'
    is_playing = BooleanProperty(False)
    current_audio = None

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # Create downloads directory if it doesn't exist
        if not os.path.exists(self.download_path):
            os.makedirs(self.download_path)

    def get_url(self):
        """Get the YouTube URL from the TextInput"""
        return self.ids.url_input.text.strip()

    def download_video(self):
        url = self.get_url()
        if not url:
            self.status = 'Please enter a YouTube URL'
            return
        
        # Run download in a separate thread to avoid blocking UI
        threading.Thread(target=self._download_video_thread, args=(url,), daemon=True).start()

    def _download_video_thread(self, url):
        try:
            self.status = 'Connecting to YouTube...'
            yt = YouTube(url)
            
            self.status = f'Downloading: {yt.title}'
            
            # Get the highest resolution stream
            video_stream = yt.streams.get_highest_resolution()
            
            # Download the video
            video_path = video_stream.download(output_path=self.download_path)
            
            # Update status on main thread
            Clock.schedule_once(lambda dt: self._update_status(f'Downloaded: {os.path.basename(video_path)}'), 0)
            
        except Exception as e:
            Clock.schedule_once(lambda dt: self._update_status(f'Error: {str(e)}'), 0)

    def convert_to_mp3(self):
        url = self.get_url()
        if not url:
            self.status = 'Please enter a YouTube URL'
            return
        
        threading.Thread(target=self._convert_to_mp3_thread, args=(url,), daemon=True).start()

    def _convert_to_mp3_thread(self, url):
        try:
            self.status = 'Converting to MP3...'
            yt = YouTube(url)
            
            # Get audio-only stream
            audio_stream = yt.streams.filter(only_audio=True).first()
            
            # Download audio
            audio_path = audio_stream.download(output_path=self.download_path)
            
            # Convert to MP3 (rename file extension)
            mp3_path = audio_path.replace('.mp4', '.mp3')
            os.rename(audio_path, mp3_path)
            
            Clock.schedule_once(lambda dt: self._update_status(f'Converted to MP3: {os.path.basename(mp3_path)}'), 0)
            
        except Exception as e:
            Clock.schedule_once(lambda dt: self._update_status(f'Error: {str(e)}'), 0)

    def play_video(self):
        url = self.get_url()
        if not url:
            self.status = 'Please enter a YouTube URL'
            return
        
        try:
            # Extract video ID from URL
            if 'youtube.com/watch?v=' in url:
                video_id = url.split('watch?v=')[1].split('&')[0]
            elif 'youtu.be/' in url:
                video_id = url.split('youtu.be/')[1].split('?')[0]
            else:
                self.status = 'Invalid YouTube URL'
                return
            
            # Create embedded YouTube URL
            embed_url = f'https://www.youtube.com/embed/{video_id}?autoplay=1'
            
            # Show video player popup with info
            popup = VideoPlayerPopup(embed_url)
            popup.open()
            
            self.status = 'Video player info opened'
            
        except Exception as e:
            self.status = f'Error playing video: {str(e)}'

    def download_mp3(self):
        url = self.get_url()
        if not url:
            self.status = 'Please enter a YouTube URL'
            return
        
        threading.Thread(target=self._download_mp3_thread, args=(url,), daemon=True).start()

    def _download_mp3_thread(self, url):
        try:
            self.status = 'Downloading MP3...'
            yt = YouTube(url)
            
            # Get audio-only stream
            audio_stream = yt.streams.filter(only_audio=True).first()
            
            # Download audio
            audio_path = audio_stream.download(output_path=self.download_path)
            
            # Convert to MP3
            mp3_path = audio_path.replace('.mp4', '.mp3')
            os.rename(audio_path, mp3_path)
            
            Clock.schedule_once(lambda dt: self._update_status(f'MP3 Downloaded: {os.path.basename(mp3_path)}'), 0)
            
        except Exception as e:
            Clock.schedule_once(lambda dt: self._update_status(f'Error: {str(e)}'), 0)

    def play_mp3_background(self):
        """Play the last downloaded MP3 in background"""
        try:
            # Find the most recent MP3 file
            mp3_files = [f for f in os.listdir(self.download_path) if f.endswith('.mp3')]
            if not mp3_files:
                self.status = 'No MP3 files found. Download one first.'
                return
            
            # Get the most recent file
            latest_mp3 = max(mp3_files, key=lambda f: os.path.getctime(os.path.join(self.download_path, f)))
            mp3_path = os.path.join(self.download_path, latest_mp3)
            
            # Stop current audio if playing
            if self.current_audio:
                self.current_audio.stop()
                self.current_audio = None
                self.is_playing = False
            
            # Load and play the audio
            self.current_audio = SoundLoader.load(mp3_path)
            if self.current_audio:
                self.current_audio.play()
                self.is_playing = True
                self.status = f'Playing: {latest_mp3}'
            else:
                self.status = 'Error loading audio file'
                
        except Exception as e:
            self.status = f'Error playing audio: {str(e)}'

    def stop_audio(self):
        """Stop background audio playback"""
        if self.current_audio:
            self.current_audio.stop()
            self.current_audio = None
            self.is_playing = False
            self.status = 'Audio stopped'

    def _update_status(self, message):
        """Update status from main thread"""
        self.status = message

class YTubeMateXApp(App):
    def build(self):
        return MainWidget()

if __name__ == '__main__':
    YTubeMateXApp().run() 
